//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Hero/InputData.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputData: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputData()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputData"",
    ""maps"": [
        {
            ""name"": ""Hero"",
            ""id"": ""0505474c-85aa-4286-841d-9501f25733f0"",
            ""actions"": [
                {
                    ""name"": ""MovementX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""64fc3e34-e7e1-43e7-bce7-d966951f5657"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MovementY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""63d2b0f3-f46c-4fa7-96c1-ef0d4b120709"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MovementPadMovement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""efa77db0-51ea-48da-83ac-00f1a2b3feb4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MovementPadShield"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4f7d584c-7376-49db-9d17-4fe2fd9c5787"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""XAxis"",
                    ""id"": ""d2a7b18e-e761-40d5-ad6c-3a2c94e312d5"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementX"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""101e4ea7-c3fb-430c-a402-e691e7157bf2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""InputController"",
                    ""action"": ""MovementX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""286c52c2-4437-4b9a-a465-6ef53bbca057"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""InputController"",
                    ""action"": ""MovementX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2036fc2a-9307-4716-b2be-217a40a6d85c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""InputController"",
                    ""action"": ""MovementX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""3df732a3-af3e-4fef-9ef4-47428599ce62"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""InputController"",
                    ""action"": ""MovementX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""YAxis"",
                    ""id"": ""424e27e9-7efa-49cc-a07c-97769ff08c6b"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementY"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d5526518-cf9e-4c5b-bd22-1da85a9b61e2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""InputController"",
                    ""action"": ""MovementY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""93d47d30-c27b-4222-b38e-6b10342e51b1"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""InputController"",
                    ""action"": ""MovementY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""93f74fc4-2b51-448e-9a51-1f502df840b1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""InputController"",
                    ""action"": ""MovementY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8f0217e7-51d0-4d70-9b71-dc0262d13083"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""InputController"",
                    ""action"": ""MovementY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Axis"",
                    ""id"": ""562b878b-45c4-43e5-b486-fa413751586d"",
                    ""path"": ""TwoModifiers"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementPadMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""16f1b06e-f02f-4daa-a200-e68c0a9aaa9b"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""InputController"",
                    ""action"": ""MovementPadMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cfa73154-b662-42f1-8dbe-f481425e0788"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""InputController"",
                    ""action"": ""MovementPadShield"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Axis"",
                    ""id"": ""70171bee-72f7-4547-886f-7ff02a408c10"",
                    ""path"": ""TwoModifiers"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementPadShield"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""dcd254e0-5aa0-455f-86b0-04f3ea72af23"",
            ""actions"": [
                {
                    ""name"": ""Enter"",
                    ""type"": ""Button"",
                    ""id"": ""e7f09464-8523-4c7a-9b03-89f77c0087d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""57c14613-3c2b-4cf8-aa02-cafe72055bf3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""71582e5a-4f41-4a3e-88b9-13a0c520dfa4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""16fe25c4-700b-49a0-b22d-14db7dde4596"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""InputController"",
                    ""action"": ""Enter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""edf5a000-61fd-440e-b08d-6ada9e7e447d"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""InputController"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7ec3764-d786-488a-9d74-65e444c7b111"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""InputController"",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""InputController"",
            ""bindingGroup"": ""InputController"",
            ""devices"": []
        }
    ]
}");
        // Hero
        m_Hero = asset.FindActionMap("Hero", throwIfNotFound: true);
        m_Hero_MovementX = m_Hero.FindAction("MovementX", throwIfNotFound: true);
        m_Hero_MovementY = m_Hero.FindAction("MovementY", throwIfNotFound: true);
        m_Hero_MovementPadMovement = m_Hero.FindAction("MovementPadMovement", throwIfNotFound: true);
        m_Hero_MovementPadShield = m_Hero.FindAction("MovementPadShield", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Enter = m_UI.FindAction("Enter", throwIfNotFound: true);
        m_UI_Exit = m_UI.FindAction("Exit", throwIfNotFound: true);
        m_UI_Pause = m_UI.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Hero
    private readonly InputActionMap m_Hero;
    private List<IHeroActions> m_HeroActionsCallbackInterfaces = new List<IHeroActions>();
    private readonly InputAction m_Hero_MovementX;
    private readonly InputAction m_Hero_MovementY;
    private readonly InputAction m_Hero_MovementPadMovement;
    private readonly InputAction m_Hero_MovementPadShield;
    public struct HeroActions
    {
        private @InputData m_Wrapper;
        public HeroActions(@InputData wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovementX => m_Wrapper.m_Hero_MovementX;
        public InputAction @MovementY => m_Wrapper.m_Hero_MovementY;
        public InputAction @MovementPadMovement => m_Wrapper.m_Hero_MovementPadMovement;
        public InputAction @MovementPadShield => m_Wrapper.m_Hero_MovementPadShield;
        public InputActionMap Get() { return m_Wrapper.m_Hero; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HeroActions set) { return set.Get(); }
        public void AddCallbacks(IHeroActions instance)
        {
            if (instance == null || m_Wrapper.m_HeroActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HeroActionsCallbackInterfaces.Add(instance);
            @MovementX.started += instance.OnMovementX;
            @MovementX.performed += instance.OnMovementX;
            @MovementX.canceled += instance.OnMovementX;
            @MovementY.started += instance.OnMovementY;
            @MovementY.performed += instance.OnMovementY;
            @MovementY.canceled += instance.OnMovementY;
            @MovementPadMovement.started += instance.OnMovementPadMovement;
            @MovementPadMovement.performed += instance.OnMovementPadMovement;
            @MovementPadMovement.canceled += instance.OnMovementPadMovement;
            @MovementPadShield.started += instance.OnMovementPadShield;
            @MovementPadShield.performed += instance.OnMovementPadShield;
            @MovementPadShield.canceled += instance.OnMovementPadShield;
        }

        private void UnregisterCallbacks(IHeroActions instance)
        {
            @MovementX.started -= instance.OnMovementX;
            @MovementX.performed -= instance.OnMovementX;
            @MovementX.canceled -= instance.OnMovementX;
            @MovementY.started -= instance.OnMovementY;
            @MovementY.performed -= instance.OnMovementY;
            @MovementY.canceled -= instance.OnMovementY;
            @MovementPadMovement.started -= instance.OnMovementPadMovement;
            @MovementPadMovement.performed -= instance.OnMovementPadMovement;
            @MovementPadMovement.canceled -= instance.OnMovementPadMovement;
            @MovementPadShield.started -= instance.OnMovementPadShield;
            @MovementPadShield.performed -= instance.OnMovementPadShield;
            @MovementPadShield.canceled -= instance.OnMovementPadShield;
        }

        public void RemoveCallbacks(IHeroActions instance)
        {
            if (m_Wrapper.m_HeroActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHeroActions instance)
        {
            foreach (var item in m_Wrapper.m_HeroActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HeroActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HeroActions @Hero => new HeroActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Enter;
    private readonly InputAction m_UI_Exit;
    private readonly InputAction m_UI_Pause;
    public struct UIActions
    {
        private @InputData m_Wrapper;
        public UIActions(@InputData wrapper) { m_Wrapper = wrapper; }
        public InputAction @Enter => m_Wrapper.m_UI_Enter;
        public InputAction @Exit => m_Wrapper.m_UI_Exit;
        public InputAction @Pause => m_Wrapper.m_UI_Pause;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Enter.started += instance.OnEnter;
            @Enter.performed += instance.OnEnter;
            @Enter.canceled += instance.OnEnter;
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Enter.started -= instance.OnEnter;
            @Enter.performed -= instance.OnEnter;
            @Enter.canceled -= instance.OnEnter;
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_InputControllerSchemeIndex = -1;
    public InputControlScheme InputControllerScheme
    {
        get
        {
            if (m_InputControllerSchemeIndex == -1) m_InputControllerSchemeIndex = asset.FindControlSchemeIndex("InputController");
            return asset.controlSchemes[m_InputControllerSchemeIndex];
        }
    }
    public interface IHeroActions
    {
        void OnMovementX(InputAction.CallbackContext context);
        void OnMovementY(InputAction.CallbackContext context);
        void OnMovementPadMovement(InputAction.CallbackContext context);
        void OnMovementPadShield(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnEnter(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
